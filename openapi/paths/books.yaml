post:
  tags:
    - File
  summary: "Upload a book"
  description: |
    Upload a book file (EPUB format) to the server. 
    The uploaded file is associated with the specified user.
    The user must be authenticated and have the appropriate permissions.
  
    If `owner_id` is not provided, the user will be inferred from the authentication token.
  operationId: uploadBook
  requestBody:
    required: true
    description: Request body containing the book file and the owner ID.
    content:
      multipart/form-data:
        schema:
          type: object
          properties:
            owner_id:
              type: string
              format: uuid
              description: |
                (Optional) The UUID of the user who owns the book.
                If not specified, the owner is determined from the authenticated user.
            epub:
              type: string
              format: binary
              description: |
                The book file to be uploaded. 
                Only files in the `application/epub+zip` format are accepted.
          required:
            - epub
        example:
          owner_id: "2c5f1d4d-3b9d-4b9d-3b9d-4b9d3b9d3b9d"
          epub: "(binary data)"

  responses:
    "200":
      description: The book file was uploaded successfully.
      content:
        text/plain:
          schema:
            type: string
            description: The unique ID of the uploaded book file.
          examples:
            success:
              summary: Example response for a successful upload
              value: "2c5f1d4d-3b9d-4b9d-3b9d-4b9d3b9d3b9d"
    "400":
      $ref: ../components/responses/BadRequest.yaml
    "401":
      $ref: ../components/responses/Unauthorized.yaml
    "403":
      $ref: ../components/responses/Forbidden.yaml
    "404":
      $ref: ../components/responses/users/UserNotFound.yaml
    "409":
      $ref: ../components/responses/books/BookConflict.yaml

  security:
    - prosaToken: []
    - apiKey: []

get:
  tags:
    - Search Books
  summary: "Search for books"
  description: |
    Retrieve a paginated list of books that match the search criteria.
    The user must be authenticated and have the appropriate permissions.
    Only users with admin privileges can search without user-based filtering.
  operationId: searchBooks
  parameters:
    - name: username
      in: query
      required: false
      description: Book owner filter.
      schema:
        type: string
      example: "john.doe"
    - name: title
      in: query
      required: false
      description: Title search query.
      schema:
        type: string
      example: "The Great Gatsby"
    - name: author
      in: query
      required: false
      description: Author search query.
      schema:
        type: string
      example: "Rick Riordan"
    - name: page
      in: query
      required: false
      description: The page number to retrieve.
      schema:
        type: integer
        default: 1
      example: 1
    - name: size
      in: query
      required: false
      description: Number of items per page.
      schema:
        type: integer
        default: 10
      example: 1

  responses:
    "200":
      description: The result of the search.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/BookSearchResult.yaml
    "400":
      $ref: ../components/responses/books/InvalidPagination.yaml
    "401":
      $ref: ../components/responses/Unauthorized.yaml
    "403":
      $ref: ../components/responses/Forbidden.yaml
    "404":
      $ref: ../components/responses/users/UserNotFound.yaml

  security:
    - prosaToken: []
    - apiKey: []
