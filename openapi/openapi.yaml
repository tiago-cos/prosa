openapi: 3.1.0
info:
  version: 1.0.0
  title: Prosa
  contact:
    name: Tiago Sousa
    email: tiago.costa.sousa@proton.me
    url: https://github.com/tiago-cos
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html

  description: |
    # Overview

    Prosa is a self-hosted book server for managing and reading your personal collection.

    ## Main Features

    ### Book Management

    - Manage EPUB files, including metadata and cover images
    - Organize books into shelves

    ### Reading, Annotations & Ratings

    - Track and store reading progress for each book
    - Add and manage book annotations
    - Rate books

    ### Automatic Metadata Fetching

    - Automatically extract book metadata from various providers

    ### User & Device Support

    - Support multiple users with different roles (regular and admin)
    - Sync books, annotations, and reading progress across multiple devices

    ## User Types

    - **Regular Users** – Can perform operations only on their own books.
    - **Admin Users** – Have full access to perform any operation on any book in the system.

    ## Authentication

    - **JWT tokens** – Obtain from the authentication endpoint
    - **API keys** – Create in your user preferences

    # Configuration

    Prosa can be configured in two ways:

    1. **Configuration files (TOML)**
    2. **Environment variables**

    The configuration system is layered, meaning defaults are loaded first and then overridden by local configuration or environment variables.

    ## Default Configuration

    Prosa ships with a default configuration file located at `src/config/default.toml`.

    This file is always loaded when the program starts.  
    You can change the path where Prosa looks for the default configuration by setting the `PROSA_DEFAULT_CONFIGURATION` environment variable. If not specified, it defaults to `src/config/default.toml`.

    ### Example `default.toml`

    ```toml
    [server]
    host = "0.0.0.0"
    port = 5000

    [auth]
    secret_key = "jwt_secret_key"
    admin_key = "admin_key"
    jwt_token_duration = 900
    refresh_token_duration = 604800
    allow_user_registration = true

    [book_storage]
    epub_path = "library/epubs"
    cover_path = "library/covers"

    [metadata_cooldown]
    goodreads = 1000
    epub_extractor = 0

    [database]
    file_path = "library/database.db"

    [kepubify]
    path = "kepubify/kepubify"

    ```

    ## Local Configuration

    Any value from the default configuration can be overridden by creating a local configuration file.

    By default, Prosa looks for `src/config/local.toml`.

    You can change this path using the `PROSA_LOCAL_CONFIGURATION` environment variable.  
    Values defined in `local.toml` will take precedence over `default.toml`.

    ## Environment Variables

    All configuration values can also be controlled directly through environment variables.  
    The format is `PROSA__<SECTION>__<KEY>`.

    -   Sections map to the `[section]` headers in the TOML file.
        
    -   Keys map to the field names inside each section.

    **Important:**

    - Sections and keys are separated using **double underscores (`__`)**.
        
    - Single underscores (`_`) inside a key name (e.g. `admin_key`) remain as-is and **are not separators**.
        
    For example:

    - To set the server port (`[server].port`):
        
      ```bash
      export PROSA__SERVER__PORT=8080
      ```

    - To set the admin key (`[auth].admin_key`):  
      _(notice there is only **one underscore** between `ADMIN` and `KEY` because the field name itself has an underscore)_
        
      ```bash
      export PROSA__AUTH__ADMIN_KEY=super_secret_key
      ```

    ## Configuration Reference

    -   **[server]**
        
        -   `host`: Network interface where the server will listen.
            
        -   `port`: Port number the server will listen on.
            
    -   **[auth]**
        
        -   `secret_key`: Secret key used for JWT encoding.
            
        -   `admin_key`: Secret used to register admin users.
            
        -   `jwt_token_duration`: Expiration duration for JWT tokens (seconds).
            
        -   `refresh_token_duration`: Expiration duration for refresh tokens (seconds).

        -   `allow_user_registration`: Whether new users can register without an admin key.  
        Set to `true` to allow anyone to register and `false` to require the admin key for all registrations.
            
    -   **[book_storage]**
        
        -   `epub_path`: Directory where EPUB files are stored.
            
        -   `cover_path`: Directory where cover images are stored.
            
    -   **[metadata_cooldown]**
        
        -   `goodreads`: Minimum delay (ms) between Goodreads metadata fetch attempts.
            
        -   `epub_extractor`: Minimum delay (ms) between EPUB extractor metadata fetch attempts.
            
    -   **[database]**
        
        -   `file_path`: Path to the SQLite database file.
            
    -   **[kepubify]**
        
        -   `path`: Path to the `kepubify` binary.

    ## Logging

    You can control the logging level using the standard `RUST_LOG` environment variable.  
    Supported values include `error`, `warn`, `info`, `debug`, and `trace`.

    - Default:
      ```bash
      RUST_LOG=info
      ```
        
    - Example (set log level to warn):
      ```bash
      export RUST_LOG=warn
      ```

    # Getting Started

    Follow these steps to get up and running with Prosa:

    ### 0. Ensure Kepubify is Installed

    Before running the server, make sure the `kepubify` binary is downloaded and its path is configured:  

    - Download the latest **kepubify-linux-64bit** release from [GitHub](https://github.com/tiago-cos/kepubify/releases/latest).  
    - Place the binary somewhere accessible on your system.  
    - Configure the path in Prosa using the [Local Configuration](#section/Configuration/Local-Configuration) under `[kepubify].path`.

    ### 1. Create a User

    Register a new user using the [Register User](#tag/Authentication/operation/register) endpoint.

    ### 2. (Optional) Enable Goodreads Metadata Extraction

    If you want Prosa to automatically fetch metadata from Goodreads:

    - Update your user preferences via the [Patch User Preferences](#tag/Preferences/operation/patchPreferences) endpoint.  
    - Add `"goodreads_metadata_extractor"` to the `metadata_providers` array.

    ### 3. Upload Your First Book

    Add a book to your library using the [Upload Book](#tag/File/operation/uploadBook) endpoint. You can manage metadata and cover images as part of this process.

    You're now ready to browse, read, and annotate your books!

externalDocs:
  description: "Checkout the project repository for more information."
  url: "https://github.com/tiago-cos/prosa"

tags:
  - name: File
  - name: Cover
  - name: Metadata
  - name: Annotations
  - name: State
  - name: Shelves
  - name: Books
  - name: Search Shelves
  - name: Search Books
  - name: Sync
  - name: Authentication
  - name: User Profile
  - name: Preferences
  - name: API Keys

x-tagGroups:
  - name: Book Management
    tags:
      - File
      - Cover
      - Metadata
      - Annotations
      - State
      - Search Books
  - name: Shelf Management
    tags:
      - Shelves
      - Books
      - Search Shelves
  - name: Syncing Devices
    tags:
      - Sync
  - name: User Management
    tags:
      - Authentication
      - User Profile
      - Preferences
      - API Keys
      
servers:
  - url: http://{host}
    variables:
      host:
        default: localhost
        description: The server host
paths:
  /books:
    $ref: "paths/books.yaml"
  /books/{book_id}/file-metadata:
    $ref: "paths/books/{book_id}/file-metadata.yaml"
  /books/{book_id}:
    $ref: "paths/books/{book_id}.yaml"
  /books/{book_id}/cover:
    $ref: "paths/books/{book_id}/cover.yaml"
  /books/{book_id}/metadata:
    $ref: "paths/books/{book_id}/metadata.yaml"
  /books/{book_id}/annotations:
    $ref: "paths/books/{book_id}/annotations.yaml"
  /books/{book_id}/annotations/{annotation_id}:
    $ref: "paths/books/{book_id}/annotations/{annotation_id}.yaml"
  /books/{book_id}/state:
    $ref: "paths/books/{book_id}/state.yaml"
  /shelves:
    $ref: "paths/shelves.yaml"
  /shelves/{shelf_id}:
    $ref: "paths/shelves/{shelf_id}.yaml"
  /shelves/{shelf_id}/books:
    $ref: "paths/shelves/{shelf_id}/books.yaml"
  /shelves/{shelf_id}/books/{book_id}:
    $ref: "paths/shelves/{shelf_id}/books/{book_id}.yaml"
  /auth/register:
    $ref: "paths/auth/register.yaml"
  /auth/login:
    $ref: "paths/auth/login.yaml"
  /auth/logout:
    $ref: "paths/auth/logout.yaml"
  /auth/refresh:
    $ref: "paths/auth/refresh.yaml"
  /users/{user_id}:
    $ref: "paths/users/{user_id}.yaml"
  /users/{user_id}/preferences:
    $ref: "paths/users/{user_id}/preferences.yaml"
  /users/{user_id}/keys:
    $ref: "paths/users/{user_id}/keys.yaml"
  /users/{user_id}/keys/{key_id}:
    $ref: "paths/users/{user_id}/keys/{key_id}.yaml"
  /sync:
    $ref: "paths/sync.yaml"
  /metadata-requests:
    $ref: "paths/metadata-requests.yaml"

components:
  securitySchemes:
    prosaToken:
      description: "User authentication JWT token."
      type: http
      scheme: bearer
      bearerFormat: JWT

    apiKey:
      description: "User API key."
      type: apiKey
      name: api-key
      in: header
