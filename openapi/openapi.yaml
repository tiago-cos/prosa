openapi: 3.1.0
info:
  version: 1.0.0
  title: Prosa
  contact:
    name: Tiago Sousa
    email: tiago.costa.sousa@proton.me
    url: https://github.com/tiago-cos
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  description: |
    # Prosa API Documentation

    ### Overview
    Prosa is a self-hosted book server that allows users to manage their digital book collection. This API provides comprehensive endpoints for book management, user administration, and metadata synchronization.

    ### Authentication
    Authentication can be performed in two ways:
    1. **JWT Token**: Users can include a bearer token in the `Authorization` header.
    2. **API Key**: Users can generate API keys with specific capabilities to be used by external applications.

    ### User Types
    The system supports two types of users:
    - **Regular Users**: Can perform operations only on their own books.
    - **Admin Users**: Have full access to perform any operation on any book in the system.

    ### Core Features

    #### Book Management
    Our system enables users to manage EPUB files, book covers, and metadata, including uploading, downloading, modifying, and removing them as needed.

    #### Automatic Metadata Fetching
    The system automatically fetches book metadata upon upload using two providers:
    1. **Goodreads Metadata Scraper**
    2. **Embedded Metadata Extractor** (extracts metadata directly from EPUB files)

    Users can configure their metadata provider preferences, defining the order of retrieval or disabling it entirely.

externalDocs:
  description: "Checkout the project repository for more information."
  url: "https://github.com/tiago-cos/prosa"
tags:
  - name: File
    description: "Operations about book files."
  - name: Cover
    description: "Operations about book covers."
  - name: Book Metadata
    description: "Operations about book metadata."
  - name: Annotations
    description: "Operations about book annotations."
  - name: State
    description: "Operations about book state."
  - name: Shelf
    description: "Operations about book collections (shelves)."
  - name: Search Shelves
    description: "Operations about searching shelves."
  - name: Search Books
    description: "Operations about searching books."
  - name: Sync
    description: "Operations about synchronization."
  - name: Authentication
    description: "Operations about user authentication."
  - name: User Profile
    description: "Operations about user profile."
  - name: Preferences
    description: "Operations about user preferences."
  - name: API Keys
    description: "Operations about user API keys."

x-tagGroups:
  - name: Book Management
    tags:
      - File
      - Cover
      - Book Metadata
      - Annotations
      - State
      - Search Books
  - name: Shelf Management
    tags:
      - Shelf
      - Book
      - Search Shelves
  - name: Sync
    tags:
      - Sync
  - name: User Management
    tags:
      - Authentication
      - User Profile
      - Preferences
      - API Keys
      
servers:
  - url: http://{host}
    variables:
      host:
        default: localhost
        description: The server host
paths:
  /books:
    $ref: "paths/books.yaml"
  /books/{book_id}/file-metadata:
    $ref: "paths/books/{book_id}/file-metadata.yaml"
  /books/{book_id}:
    $ref: "paths/books/{book_id}.yaml"
  /books/{book_id}/cover:
    $ref: "paths/books/{book_id}/cover.yaml"
  /books/{book_id}/metadata:
    $ref: "paths/books/{book_id}/metadata.yaml"
  /books/{book_id}/annotations:
    $ref: "paths/books/{book_id}/annotations.yaml"
  /books/{book_id}/annotations/{annotation_id}:
    $ref: "paths/books/{book_id}/annotations/{annotation_id}.yaml"
  /books/{book_id}/state:
    $ref: "paths/books/{book_id}/state.yaml"
  /shelves:
    $ref: "paths/shelves.yaml"
  /shelves/{shelf_id}:
    $ref: "paths/shelves/{shelf_id}.yaml"
  /shelves/{shelf_id}/books:
    $ref: "paths/shelves/{shelf_id}/books.yaml"
  /shelves/{shelf_id}/books/{book_id}:
    $ref: "paths/shelves/{shelf_id}/books/{book_id}.yaml"
  /auth/register:
    $ref: "paths/auth/register.yaml"
  /auth/login:
    $ref: "paths/auth/login.yaml"
  /auth/logout:
    $ref: "paths/auth/logout.yaml"
  /auth/refresh:
    $ref: "paths/auth/refresh.yaml"
  /users/{user_id}:
    $ref: "paths/users/{user_id}.yaml"
  /users/{user_id}/preferences:
    $ref: "paths/users/{user_id}/preferences.yaml"
  /users/{user_id}/keys:
    $ref: "paths/users/{user_id}/keys.yaml"
  /users/{user_id}/keys/{key_id}:
    $ref: "paths/users/{user_id}/keys/{key_id}.yaml"
  /sync:
    $ref: "paths/sync.yaml"
  /metadata-requests:
    $ref: "paths/metadata-requests.yaml"

components:
  securitySchemes:
    prosaToken:
      description: "User authentication JWT token."
      type: http
      scheme: bearer
      bearerFormat: JWT

    apiKey:
      description: "User API key."
      type: apiKey
      name: api-key
      in: header
      format: password
